apply plugin: 'com.android.application'

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "mars.ring"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionCode rootProject.versionNum
        versionName rootProject.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'mars.ring'
        ]
    }
    signingConfigs {
        releaseSigning {
            storeFile file ('GuploadKeystore.jks')
            storePassword ''
            keyAlias 'androidKeystore'
            keyPassword ''
        }
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseSigning
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:customtabs:${rootProject.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.supportLibVersion}"
    implementation "com.android.support:support-vector-drawable:${rootProject.supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.google.android.gms:play-services-maps:${rootProject.playServicesVersion}"
    implementation "com.google.android.gms:play-services-location:${rootProject.playServicesVersion}"
    implementation 'org.altbeacon:android-beacon-library:2.12.4'
    implementation 'net.openid:appauth:0.7.0'
    implementation 'com.squareup.okio:okio:1.13.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation  group: 'com.google.guava', name: 'guava', version: '23.2-android'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task run(dependsOn: 'installDebug') {
    doFirst {
        println(">> adb run...")
        String adb = System.getenv()['ANDROID_HOME'] + '/platform-tools/adb'
        String cmd = "${adb} shell am start -n mars.ring/.interfaces.auth.LoginActivity"
        def proc = cmd.execute()
        proc.in.eachLine { line -> println line }
        proc.err.eachLine { line -> System.err.println('ERROR: ' + line) }
        proc.waitFor()
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(':app:assembleRelease')) {
        // Only execute when we are trying to assemble a release build
//        def pass = System.console().readPassword("\nPlease enter key passphrase: ")
        // readPassword returns a char[] so we need to wrap it into a string
        ant.input(message: 'Enter keystore password:', addproperty: 'userInputPassword', defaultValue : '')
        def pass = ant.properties.userInputPassword
        android.signingConfigs.releaseSigning.storePassword = new String(pass)
        android.signingConfigs.releaseSigning.keyPassword = new String(pass)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:unchecked"]
//    println 'Compiler args: ' + options.compilerArgs
}